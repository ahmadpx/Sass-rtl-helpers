/* Localization Functions */
/* ................................................. */

/*
localization_values
=============================================
used with or without localization mixins in _mixins.localization.scss
ex. background-img: ltr_rtl_values(15px, 10px);
ex. @include margin-right(ltr_rtl_values(15px, 10px));
output:
ltr: margin-right: 15px;
rtl: margin-left: 10px;
*/
@function ltr-rtl-values($value, $opposite) {
    @if $default_direction == 'ltr' {
        @return $value;
    } @else if $default_direction == 'rtl' {
        @return $opposite;
    }
}


/*
swap-side-values
=============================================
used to Reorder values according to direction such as margin and padding
ex. padding: swap-side-values(2px 4px 3px 5px)
output:
padding: 2px 5px 3px 4px
*/
@function swap-side-values ($values) {
    @if length($values) == 4 and last($values) != '!important' {
        // 4 values without !important
        @return nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2);
    } @else if length($values) > 4 {
        // 5 values with !important
        @return nth($values, 1) nth($values, 4) nth($values, 3) nth($values, 2) !important;
    } @else {
        // 4 values one of them is !important
        @return $values;
    }
}

/*
swap-corner-values
=============================================
used to Reorder values according to direction such as border-radius
ex. border-radius: swap-corner-values(5px 8px 3px 4px)
output:
border-radius: 8px 5px 4px 3px;
*/
@function swap-corner-values ($values) {
    @if length($values) == 2 {
        @if last($values) == '!important' {
            @return first($values) !important;
        } @else {
            @return nth($values, 2) nth($values, 1);
        }
    } @else if length($values) == 3 {
        @if last($values) == '!important' {
            @return nth($values, 2) nth($values, 1) !important;
        } @else {
            @return nth($values, 2) nth($values, 1) nth($values, 2) nth($values, 3);
        }
    } @else if length($values) == 4 {
        @if last($values) == '!important' {
            @return nth($values, 2) nth($values, 1) nth($values, 2) nth($values, 3) !important;
        } @else {
            @return nth($values, 2) nth($values, 1) nth($values, 4) nth($values, 3);
        }
    } @else {
        @return nth($values, 2) nth($values, 1) nth($values, 4) nth($values, 3) !important;
    }
}

/*
swap-direction
=============================================
swap direction from left to right and vice versa
ex. float: swap-direction(right)
output:
float: left;
*/
@function swap-direction ($values) {
    @if first($values) == left {
        @return replace($values, first($values), $default_float);
    } @else if first($values) == right {
        @return replace($values, first($values), $opposite_float);
    } @else {
        @return $values;
    }
}

/*
swap-box-shadow
=============================================
this function is valid for one value for box-shadow if you want to use multible values for box-shadow
use the mixin of box-shadow() in _mixins.localization.scss
ex. box-shadow: swap-box-shadow(2px 5px 0 #000 !important);
output :
box-shadow: -2px 5px 0 #000 !important;
*/
@function swap-box-shadow ($values) {
    // Reedit axis values in rtl direction
    @if length($values) == 6 {
        // length is 5 and !important is the sixth value
        @if last($values) == '!important' {
            @if first($values) == inset {
                // there is inset and no spacing
                @return nth($values, 1)
                #{- nth($values, 2)} nth($values, 3) nth($values, 4) nth($values, 5) !important;
            } @else {
                // there is spacing and no inset
                @return #{- nth($values, 1)}
                nth($values, 2) nth($values, 3) nth($values, 4) nth($values, 5) !important;
            }
        } @else {
            // there is inset and spacing
            @return nth($values, 1)
            #{- nth($values, 2)} nth($values, 3) nth($values, 4) nth($values, 5) nth($values, 6);
        }

    } @else if length($values) == 5 {
        // length is 4 and !important is the fivth value
        @if last($values) == '!important' {
            @if first($values) == inset {
                // there is inset and no spacing neither blur
                @return nth($values, 1)
                #{- nth($values, 2)}  nth($values, 3) nth($values, 4) !important;
            } @else {
                // there is no inset neither spacing
                @return #{- nth($values, 1)}  nth($values, 2) nth($values, 3) nth($values, 4) !important;
            }
        } @else {
            @if first($values) == inset {
                // there is inset and no spacing
                @return nth($values, 1)
                #{- nth($values, 2)} nth($values, 3) nth($values, 4) nth($values, 5);
            } @else {
                // there is spacing and no inset
                @return #{- nth($values, 1)}
                nth($values, 2) nth($values, 3) nth($values, 4) nth($values, 5);
            }
        }

    } @else if length($values) == 4 {
        // length is 3 and !important is the fourth value
        @if last($values) == '!important' {
            // there is no inset neither spacing neither blur
            @return #{- nth($values, 1)} nth($values, 2) nth($values, 3) !important;
        } @else {
            @if first($values) == inset {
                // there is inset and no spacing neither blur
                @return nth($values, 1)
                #{- nth($values, 2)}  nth($values, 3) nth($values, 4);
            } @else {
                // there is no inset neither spacing
                @return #{- nth($values, 1)}  nth($values, 2) nth($values, 3) nth($values, 4);
            }
        }
    } @else {
        @return $values;
    }
}